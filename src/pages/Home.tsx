import React from "react";
import { useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import qs from "qs";

import { selectFilter } from "../redux/filter/selectors";
import {
  setCategoryId,
  setPageCurrent,
  setFilters,
} from "../redux/filter/slice";
import { SearchPizzaParams } from "../redux/pizzas/types";
import { selectPizzaData } from "../redux/pizzas/selectors";
import { fetchPizzas } from "../redux/pizzas/asyncActions";
import { useAppDispatch } from "../redux/store";

import { sortTypes } from "../components/Sort";

import {
  Categories,
  Search,
  Sort,
  PizzaBlock,
  Skeleton,
  Pagination,
} from "../components";

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();
  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { categoryId, sortTypeObj, pageCurrent, searchValue } =
    useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzaData);

  const onChangeCategory = React.useCallback((id: number) => {
    dispatch(setCategoryId(id));
  }, []);

  const onChangePage = (number: number) => {
    dispatch(setPageCurrent(number));
  };

  const getPizzas = async () => {
    const category = categoryId > 0 ? `category=${categoryId}` : "";
    const order = sortTypeObj.sortProperty.includes("-") ? "asc" : "desc";
    const sortBy = sortTypeObj.sortProperty.replace("-", "");
    const search = searchValue ? `&search=${searchValue}` : "";

    dispatch(
      fetchPizzas({
        category,
        order,
        sortBy,
        search,
        pageCurrent: String(pageCurrent),
      })
    );

    window.scrollTo(0, 0);
  };

  // 1. –í—à–∏–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  React.useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        pageCurrent,
        categoryId,
        sortBy: sortTypeObj.sortProperty,
      });

      navigate(`?${queryString}`);

      console.log(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏:\n 1. –∏–∑–º–µ–Ω–µ–Ω—ã\n 2. –≤—à–∏—Ç—ã –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–∞—Ä—Å–∏–Ω–≥—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –†–µ–¥–∞–∫—Å"
      );
    }
    isMounted.current = true;
  }, [pageCurrent, categoryId, sortTypeObj.sortProperty]);

  // 2. –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ –†–µ–¥–∞–∫—Å
  React.useEffect(() => {
    if (window.location.hash === "#/") {
      window.location.hash.substring(3);
    } else if (window.location.hash) {
      const params = qs.parse(
        window.location.hash.substring(3)
      ) as unknown as SearchPizzaParams;

      const sort = sortTypes.find(
        (sortType) => sortType.sortProperty === params.sortBy
      );

      console.log(
        "–ü—Ä–æ–∏–∑–æ—à—ë–ª –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
      );
      console.log("PARAMS: \n", params);

      console.log(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: \n",
        "pageCurrent = ",
        params.pageCurrent,
        "\n",
        "category =",
        params.category,
        "\n",
        "categoryId =",
        categoryId,
        "\n",
        "sort =",
        sort,
        "\n",
        "sortTypeObj =",
        sortTypeObj
      );

      if (sort) {
        dispatch(
          setFilters({
            pageCurrent: Number(params.pageCurrent),
            categoryId: Number(params.category),

            // sortTypeObj,
            // --- @ts-ignore
            sortTypeObj: sort,
            searchValue: params.search,
          })
        );

        dispatch(setCategoryId(Number(params.category)));
      }
      console.log(
        "–ü—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –†–µ–¥–∞–∫—Å"
      );
      console.log(
        "–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –†–µ–¥–∞–∫—Å –Ω–æ–≤—ã–π sort —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–æ–π:\n",
        sort,
        "—Å —Ç–∏–ø–æ–º –∑–Ω–∞—á–µ–Ω–∏—è",
        typeof sort,
        "\n –∞ –Ω–æ–≤—ã–π sortTypeObj —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–æ–π:",
        sortTypeObj,
        "(—Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: ",
        typeof sortTypeObj,
        ")",
        "\n a categoryId —Ç–µ–ø–µ—Ä—å —Ç–∞–∫–æ–π:\n",
        categoryId,
        "—Å —Ç–∏–ø–æ–º –∑–Ω–∞—á–µ–Ω–∏—è",
        typeof categoryId
      );

      isSearch.current = true;
    }
  }, []);

  // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Ü—Ü
  React.useEffect(() => {
    if (!isSearch.current) {
      console.log(
        "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏/–∏–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: \n",
        "pageCurrent = ",
        pageCurrent,
        "\n",
        "categoryId =",
        categoryId,
        "\n",
        "sortTypeObj.sortProperty =",
        sortTypeObj.sortProperty,
        "\n",
        "searchValue =",
        searchValue
      );
      getPizzas();
    }

    isSearch.current = false;
  }, [pageCurrent, categoryId, sortTypeObj.sortProperty, searchValue]);

  const skeletonBlocks = [...new Array(4)].map((_, index) => (
    <Skeleton key={index} />
  ));

  const pizzaBlocks = items.map((obj: any) =>
    status === "loading" ? (
      <Skeleton />
    ) : (
      <PizzaBlock {...obj} key={obj.imgUrl} />
    )
  );

  return (
    <>
      <div className="layout">
        <Categories
          categoryId={categoryId}
          onChangeCategory={(id: any) => onChangeCategory(id)}
        />
        <div className="layout1">
          <Sort value={sortTypeObj} />
          <Search />
        </div>
      </div>
      <Pagination pageCurrent={pageCurrent} onChangePage={onChangePage} />

      {status === "loading" && (
        <div style={{ margin: "30px 0 30px" }}>–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Ü—Ü—ã...</div>
      )}

      {status === "error" ? (
        <div>
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            –ø–æ–∑–∂–µ.
          </p>
        </div>
      ) : (
        <div className="layout2">
          {status === "loading" ? skeletonBlocks : pizzaBlocks}
        </div>
      )}

      <Pagination pageCurrent={pageCurrent} onChangePage={onChangePage} />
    </>
  );
};

export default Home;
